* 第1章 对象导论
    之所以把自然分解,组织成各种概念,根据概念的含义分类.如果不这样,无法沟通和交流.
    OOP: Object-oriented /ˈɔːrientɪd/ Programming 面向对象编程
    这章目的: 了解对象的重要性,如何使用对象进行设计(程序)

** 1.1 抽象过程
    抽象: 黑盒抽象!
        关键: 能解决问题的复杂性取决于类型和质量
        类型:
            例: 汇编对底层机器的抽象
                命令式语言(C~FORTRAN)对汇编的抽象
                用语言(JAVA)建立模型对实际问题进行抽象
    LISP: LSIP只对特定问题建模
    OOP:
        能解决的问题: 允许根据问题描述问题
        对象特性: 每个对象都是一台计算机--有状态~有操作~可以要求对象执行这些操作
        五大基本特性:
            1. 万物皆为对象
            2. 程序是对象的集合,通过发送消息告知彼此要做的
            3. 闭包,对象里面可以有其它对象
            4. 每个对象都有其类型
            5. 某一类性的所有对象可以接受相同的消息, 继承父类的方法和变量


** 1.2 每个对象都有一个接口
都有类的功能
创建类->创建实例->发送消息
类和类型是一个意思
UML

** 1.3 每个对象都提供服务
对象给外界提供服务,服务解决问题
做OOP程序设计就是: 我需要哪些对象提供什么样的服务,才能给我解决问题?

** 1.4 被隐藏的具体实现
private, public
开发者分为[类创建者]和[客户端程序员].
封装: 对外暴露的可以任意访问,对外隐藏的大部分是内部脆弱的
    封装的原因:
        1. 客户端程序不该了解类的细节 黑盒抽象
        2. 方便后续优化,改变细节

** 1.5 复用具体实现
代码复用:
    创建对象
    组合 has-a, 对比继承优先考虑组合

** 1.6 继承
UML图: 由导出类指向基类

*** 1.6.1 "是一个"与"像是一个"的关系
组合和继承

** 1.7 伴随多态的可互换对象
调用list.add(), 实际运行时调用arrayList.add()

** 1.8 单根继承结构
所有都继承自Object
垃圾回收用的就是Object的接口

** 1.9 容器
List(存储序列)~Map(建立对象直接的关联)~Set(每个对象只持有一个)~队列~树~堆栈

*** 1.9.1 参数化类型
泛型,帮助程序员少犯错误

** 1.10 对象的创建和生命期
使用对象: 如何生成和销毁他们?
    1. C++程序员控制
        gc: 内存泄露
    2. JAVA: 堆(heap)的内存池动态创建,直到运行时才知道对象数量~生命周期~具体类型
        gc: 垃圾回收机制

** 1.11 异常处理: 处理错误
很多语言要求程序员自己处理,Java已经处理了
异常处理不是面向对象的特性

** 1.12 并发编程
并发: 同一时刻处理多个任务
    把大问题分割几个独立运行的部分(线程); 停下手上的活,去干其它的,然后再回来.
    例子: 用户界面, 用户按下按钮快速得到相应,而不用等到程序跑完当前任务
    多线程->操作系统->多处理器(真正并发): 多线程是对多处理器的抽象
    问题: 共享资源!!!

** 1.13 Java与Internet
Java为什么重要? 因为解决了互联网的程序设计问题

*** 1.13.1 Web是什么
Web
1. 客户/服务器计算技术
2. Web就是一台巨型服务器
3. Java
4. 备选方案

*** 1.13.2 客户端编程
Java客户端

** 1.14 总结
OOP是一种抽象的程序设计方法,用来解决实际问题
五大特性:
    1. 对象有类型
    2. 对象可组合
    3. 对象可继承
    4. 所有都是对象
    5. 程序是对象的集合
对象都有类的数据和行为;
对象是服务提供者;
用对象的人,不需要了解具体实现
可以组合使用对象的代码单元
运行时才真正确认对象的类型
每个对象都继承Object, GC运用了Object
Java提供集合类
对象的创建和生命周期,都由Java来控制
Java内置异常处理
并发就是同时处理多个任务,多线程即是对处理器的抽象
Java和Internet ...